# PKMS MAIN FILE ORGANIZATION & ARCHITECTURE GUIDE
# ================================================
# Created: 2025-08-14 16:55:00 +05:45
# Purpose: Prevent duplicate main.py files and document proper architecture
# Status: ACTIVE - DO NOT DELETE OR MODIFY WITHOUT UPDATING THIS FILE

## 🚨 CRITICAL: MAIN FILE STRUCTURE
### **ONLY ONE MAIN.PY FILE SHOULD EXIST:**
- ✅ **CORRECT**: `pkms-backend/main.py` (Root level - USED BY DOCKER)
- ❌ **WRONG**: `pkms-backend/app/main.py` (Should NOT exist - DELETED)

### **Docker Configuration:**
```dockerfile
# Dockerfile line 57 - THIS IS THE CORRECT COMMAND
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
```
- Docker runs from `pkms-backend/` directory
- Uses `main:app` which refers to `pkms-backend/main.py`
- **NEVER** create `app/main.py` - it will cause conflicts!

## 🏗️ BACKEND ARCHITECTURE
### **Root Directory Structure:**
```
pkms-backend/
├── main.py                    ← 🎯 MAIN APPLICATION ENTRY POINT (Docker uses this)
├── Dockerfile                 ← Docker configuration
├── requirements.txt           ← Python dependencies
├── app/                       ← Application package
│   ├── __init__.py           ← Package initialization
│   ├── config.py             ← Configuration settings
│   ├── database.py           ← Database connection
│   ├── routers/              ← API route definitions
│   ├── models/               ← Database models
│   ├── services/             ← Business logic
│   └── utils/                ← Utility functions
└── scripts/                   ← Database scripts and utilities
```

## 🎨 FRONTEND ARCHITECTURE
### **Root Directory Structure:**
```
pkms-frontend/
├── index.html                 ← 🎯 MAIN HTML ENTRY POINT
├── package.json               ← Node.js dependencies and scripts
├── vite.config.ts             ← Vite build configuration
├── tsconfig.json              ← TypeScript configuration
├── src/                       ← Source code package
│   ├── main.tsx              ← React application entry point
│   ├── App.tsx               ← Main application component
│   ├── config.ts             ← Frontend configuration
│   ├── components/           ← Reusable UI components
│   │   ├── auth/            ← Authentication components
│   │   ├── common/          ← Shared components
│   │   ├── diary/           ← Diary-specific components
│   │   ├── documents/       ← Document components
│   │   ├── notes/           ← Note components
│   │   ├── shared/          ← Cross-module components
│   │   └── todos/           ← Todo/Project components
│   ├── pages/               ← Page-level components
│   ├── services/            ← API service layer
│   ├── stores/              ← State management (Zustand)
│   ├── hooks/               ← Custom React hooks
│   ├── types/               ← TypeScript type definitions
│   ├── utils/               ← Utility functions
│   └── styles/              ← CSS and styling
└── public/                   ← Static assets
```

### **Critical Frontend Files:**
- **`src/main.tsx`**: React app bootstrap and routing setup
- **`src/App.tsx`**: Main application layout and navigation
- **`src/services/api.ts`**: Core API service with authentication and CORS handling
- **`src/stores/authStore.ts`**: Authentication state management
- **`src/components/shared/Layout.tsx`**: Main application layout wrapper
- **`src/components/shared/Navigation.tsx`**: Navigation menu and routing
- **`vite.config.ts`**: Build configuration, dev server settings
- **`tsconfig.json`**: TypeScript compilation rules

### **Database Locations:**
1. **Primary Database**: `/app/data/pkm_metadata.db` (Docker container)
2. **Auth Database**: `/app/data/auth.db` (Docker container)
3. **Host Mount**: `./PKMS_Data/` → `/app/PKMS_Data/` (Backup operations)
4. **Development**: Local `pkms-backend/data/` directory

### **Environment Variables:**
```bash
DATABASE_URL=sqlite+aiosqlite:///app/data/pkm_metadata.db
AUTH_DB_PATH=/app/data/auth.db
DATA_DIR=/app/data
LOG_LEVEL=debug
ENVIRONMENT=development
DEBUG=true
```

## 🔧 CORS CONFIGURATION
### **Backend CORS Settings (in main.py):**
```python
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",      # React dev server
        "http://127.0.0.1:3000",     # React dev server (alt)
        "http://localhost:5173",      # Vite dev server
        "http://127.0.0.1:5173"      # Vite dev server (alt)
    ],
    allow_credentials=True,           # For authentication
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=["*"],
    expose_headers=["*"]
)
```

### **Frontend CORS Handling:**
- **`src/services/api.ts`**: Core API service with proper CORS headers
- **Authentication**: JWT tokens sent in Authorization header
- **Error Handling**: Network error detection and user-friendly messages
- **Retry Logic**: Automatic retry for failed requests
- **Session Management**: Token refresh and session extension

### **CORS Middleware Order:**
1. **FIRST**: CORS middleware (MUST be first)
2. **SECOND**: Sanitization middleware
3. **THIRD**: Rate limiting middleware
4. **LAST**: TrustedHost middleware (only in production)

## 🚫 WHAT NOT TO DO
### **Backend - NEVER CREATE THESE FILES:**
- ❌ `pkms-backend/app/main.py` ← Causes CORS conflicts
- ❌ `pkms-backend/app.py` ← Wrong location
- ❌ `pkms-backend/src/main.py` ← Wrong structure

### **Frontend - NEVER CREATE THESE FILES:**
- ❌ `pkms-frontend/src/main.js` ← Use .tsx extension
- ❌ `pkms-frontend/src/App.js` ← Use .tsx extension
- ❌ `pkms-frontend/src/services/api.js` ← Use .ts extension
- ❌ `pkms-frontend/src/stores/store.js` ← Use .ts extension

### **NEVER MODIFY:**
- ❌ Docker CMD in Dockerfile (unless changing entry point)
- ❌ CORS middleware order (CORS must be first)
- ❌ Router prefixes (must use `/api/v1/` consistently)
- ❌ Frontend entry points (main.tsx, App.tsx) without updating routing
- ❌ API service base URL without updating CORS origins

## ✅ PROPER DEVELOPMENT WORKFLOW
### **Backend - Adding New Features:**
1. **Routers**: Add to `app/routers/` directory
2. **Models**: Add to `app/models/` directory
3. **Services**: Add to `app/services/` directory
4. **Import**: Add to `main.py` router imports
5. **Include**: Add to `main.py` router registration

### **Example Adding New Backend Router:**
```python
# 1. Create: app/routers/new_feature.py
# 2. Import in main.py:
from app.routers import new_feature
# 3. Register in main.py:
app.include_router(new_feature.router, prefix="/api/v1/new-feature")
```

### **Frontend - Adding New Features:**
1. **Components**: Add to appropriate `src/components/` subdirectory
2. **Pages**: Add to `src/pages/` directory
3. **Services**: Add to `src/services/` directory
4. **Stores**: Add to `src/stores/` directory
5. **Types**: Add to `src/types/` directory
6. **Update Routing**: Add route in `src/App.tsx` or page component

### **Example Adding New Frontend Feature:**
```typescript
// 1. Create: src/components/new-feature/NewFeatureComponent.tsx
// 2. Create: src/services/newFeatureService.ts
// 3. Create: src/stores/newFeatureStore.ts
// 4. Add types: src/types/newFeature.ts
// 5. Update routing in App.tsx or page component
```

## 🔍 TROUBLESHOOTING
### **Backend CORS Issues:**
1. Check if `app/main.py` exists (should NOT)
2. Verify CORS middleware is FIRST in main.py
3. Check Docker is using correct main.py
4. Verify frontend origin is in allow_origins list

### **Frontend CORS Issues:**
1. Check if backend is running on correct port (8000)
2. Verify API service base URL in `src/services/api.ts`
3. Check browser console for CORS errors
4. Verify authentication token is valid
5. Check if frontend is running on allowed origin (3000 or 5173)

### **Backend Import Errors:**
1. Check `app/__init__.py` exists
2. Verify import paths use `app.` prefix
3. Check if duplicate files exist

### **Frontend Import Errors:**
1. Check TypeScript compilation errors
2. Verify import paths are correct
3. Check if component files exist in right directories
4. Verify file extensions (.tsx for components, .ts for utilities)

### **Database Issues:**
1. Verify Docker volumes are mounted correctly
2. Check `DATA_DIR` environment variable
3. Ensure database files have correct permissions

### **Frontend Build Issues:**
1. Check `npm install` completed successfully
2. Verify TypeScript configuration in `tsconfig.json`
3. Check Vite configuration in `vite.config.ts`
4. Verify all dependencies in `package.json`

## 📋 MAINTENANCE CHECKLIST
### **Backend - Before Committing:**
- [ ] Only one `main.py` exists (root level)
- [ ] No `app/main.py` file
- [ ] CORS configuration is correct
- [ ] All routers use `/api/v1/` prefix
- [ ] Docker CMD points to correct main.py

### **Frontend - Before Committing:**
- [ ] TypeScript compilation passes (`npm run build`)
- [ ] All imports use correct file extensions (.tsx, .ts)
- [ ] API service URLs are correct
- [ ] Component file structure follows conventions
- [ ] No console errors in browser

### **Backend - After Pulling Changes:**
- [ ] Check for duplicate main.py files
- [ ] Verify CORS configuration
- [ ] Test Docker startup
- [ ] Verify API endpoints work

### **Frontend - After Pulling Changes:**
- [ ] Run `npm install` for new dependencies
- [ ] Check TypeScript compilation
- [ ] Verify API endpoints work
- [ ] Test critical user flows
- [ ] Check for console errors

## 🎯 KEY TAKEAWAYS
### **Backend:**
1. **ONE main.py file** - at root level only
2. **CORS first** - middleware order matters
3. **Consistent prefixes** - use `/api/v1/` for all routes
4. **Docker uses root main.py** - never change this

### **Frontend:**
1. **TypeScript first** - use .tsx for components, .ts for utilities
2. **Component organization** - follow directory structure conventions
3. **API service layer** - centralize all backend communication
4. **State management** - use Zustand stores for global state

### **General:**
5. **Document everything** - prevent future confusion
6. **Test both sides** - backend API + frontend integration

## 📞 WHO TO CONTACT
- **File Organization Issues**: Check this document first
- **Backend CORS Problems**: Verify middleware order and origins
- **Frontend CORS Issues**: Check API service configuration and browser console
- **Database Issues**: Check Docker volumes and environment variables
- **Backend Import Errors**: Verify file structure and __init__.py files
- **Frontend Import Errors**: Check TypeScript compilation and file extensions
- **Build Issues**: Verify package.json dependencies and build configuration

---
# END OF DOCUMENT
# Last Updated: 2025-08-14 16:55:00 +05:45
# Next Review: When adding new routers or changing architecture
