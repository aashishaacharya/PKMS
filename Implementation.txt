# PKMS Implementation Documentation

## Overview
Personal Knowledge Management System (PKMS) built with FastAPI backend and React frontend, featuring comprehensive content management, encrypted diary functionality, and advanced testing capabilities.

## System Architecture

### Backend (FastAPI)
- **Framework**: FastAPI with SQLite database
- **Authentication**: JWT-based with secure cookie handling  
- **Database**: SQLite with SQLAlchemy ORM
- **Security**: Password hashing, input sanitization, CORS configuration
- **Testing**: Comprehensive pytest suite with fixtures

### Frontend (React + TypeScript)
- **Framework**: React 18 with TypeScript
- **UI Library**: Mantine v7 components
- **State Management**: Custom stores with localStorage
- **Routing**: React Router with protected routes
- **Testing**: Advanced testing interface with real-time diagnostics

## Core Modules

### 1. Authentication System
- JWT token-based authentication
- Secure password hashing with bcrypt
- Auto-logout on token expiration
- Race condition protection in auth guards

### 2. Notes Management
- Rich text editing capabilities
- Tag-based organization
- Full-text search functionality
- Hierarchical categorization

### 3. Document Management
- File upload and storage
- Multiple format support
- Metadata extraction
- Version tracking

### 4. Todo System
- Task management with projects
- Priority levels and due dates
- Progress tracking
- Status workflows

### 5. Encrypted Diary System
- Client-side encryption for privacy
- Daily entries with mood tracking
- Media attachments support
- Password-protected access

### 6. Archive Module
- Hierarchical folder structure
- Bulk operations support
- Tagging and categorization
- Search and retrieval

## 🔧 Advanced Testing & Debugging System

### Frontend Testing Interface
**Access**: User menu → "Testing & Debug"
**New Features**: 6-tab interface with enterprise-level monitoring capabilities

#### 1. Authentication Testing Tab
- **Comprehensive Auth Tests**: Multi-step authentication flow testing
- **Real-time Logging**: Timeline-based step tracking with timestamps
- **Token Validation**: JWT structure, expiry, and payload analysis
- **🆕 Token Remaining Time**: Shows exact seconds remaining until token expiry
- **API Connectivity**: Backend health, CORS, and endpoint accessibility
- **Results Summary**: Visual status indicators for auth components

**How Authentication Testing Works:**
1. **Token Analysis**: Decodes JWT payload and validates structure
2. **Expiry Calculation**: Shows remaining time in seconds (e.g., "1234s remaining")
3. **Backend Connectivity**: Tests health endpoint and response times
4. **CORS Validation**: Verifies cross-origin request handling
5. **Auth Endpoint Testing**: Tests authenticated API access
6. **Visual Results**: Color-coded badges showing success/failure status

**Features:**
- Live authentication monitoring with countdown
- Detailed step-by-step logs with timestamps
- Token decoding and validation with remaining time display
- Copy test results functionality
- Quick authentication status checks

#### 2. Database Testing Tab
- **Database Statistics**: Size, table counts, schema analysis
- **🆕 Individual Table Sizes**: Shows storage size for each table alongside row counts
- **Table Group Navigation**: Organized by modules (Core, Content, Diary, Archive, Organization)
- **Sample Data Inspector**: Configurable row fetching (1-20 rows)
- **Schema Drawer**: Complete database schema with column details
- **🆕 37 Tables Explanation**: Modal explaining all database tables with categorization

**How Database Testing Works:**
1. **Size Analysis**: Uses SQLite PRAGMA queries to get accurate table sizes
2. **Row + Size Display**: Shows both count and storage (e.g., "156 rows" + "2.3 MB")
3. **Table Categorization**: Groups tables by function for easier navigation
4. **Complete Table Breakdown**: Explains FTS5 search tables and system tables
5. **Sample Data Inspection**: Fetches and displays actual table data with JSON formatting
6. **Schema Analysis**: Shows column types, constraints, and relationships

**Table Categories:**
- **Application Data** (~17 tables): Your actual data (users, notes, todos, etc.)
- **Full-Text Search (FTS5)** (~20 tables): SQLite search indexes (automatically created)
- **SQLite System** (~3 tables): Internal SQLite tables

**Table Groups:**
- **Core System**: users, sessions, recovery_keys
- **Content Modules**: notes, documents, todos, projects  
- **Diary & Privacy**: diary_entries, diary_media
- **Archive System**: archive_folders, archive_items
- **Organization**: tags, links, cross-references

#### 3. Diary Encryption Testing Tab
- **Password Verification**: Test diary encryption passwords
- **Verbose Logging**: Step-by-step encryption process tracking
- **Sample Entry Analysis**: Decrypt and display diary data
- **Encryption Metrics**: Blob size, IV length, tag analysis
- **Media File Counting**: Associated file verification

**How Diary Encryption Testing Works:**
1. **Password Validation**: Tests provided password against encrypted diary entries
2. **Decryption Process**: Shows step-by-step decryption with detailed logging
3. **Sample Entry Display**: Shows decrypted diary content (title, mood, metadata)
4. **Encryption Analysis**: Displays encryption blob length and technical details
5. **Media Verification**: Counts associated encrypted media files

#### 4. System Health Tab
- **Database Connectivity**: SQLite version and connection status
- **User Session Info**: Account details and session data
- **System Metrics**: Table counts and system information
- **Performance Indicators**: Response times and health checks

**How System Health Testing Works:**
1. **Database Health**: Tests SQLite connectivity and version
2. **User Session Analysis**: Shows current user details and session info
3. **System Overview**: Displays table counts and system statistics
4. **Performance Metrics**: Measures response times and system health

#### 5. 🆕 Advanced Testing Tab
**New Enterprise-Level Testing Capabilities**

##### A. Performance Monitoring
- **Query Timing Analysis**: Measures simple and complex query performance
- **Database Configuration**: Shows SQLite PRAGMA settings and optimization status
- **Performance Scoring**: Rates system performance (good/slow/critical)
- **Optimization Recommendations**: Provides specific improvement suggestions

**How Performance Testing Works:**
1. **Query Benchmarking**: Times simple count queries and complex joins
2. **Configuration Analysis**: Checks cache size, journal mode, synchronization settings
3. **Performance Scoring**: Calculates overall performance rating based on timings
4. **Smart Recommendations**: Suggests optimizations based on measured performance

##### B. Data Integrity Validation
- **Foreign Key Integrity**: Checks for orphaned records and broken relationships
- **Date Consistency**: Validates date fields for logical consistency
- **Required Field Validation**: Ensures critical fields are properly populated
- **SQLite Integrity Check**: Runs PRAGMA integrity_check for database corruption
- **Detailed Results**: Shows pass/warning/critical status with explanations

**How Data Integrity Testing Works:**
1. **Relationship Validation**: Checks foreign key constraints across all tables
2. **Data Consistency**: Validates dates, required fields, and data formats
3. **Database Integrity**: Runs SQLite's built-in integrity verification
4. **Comprehensive Reporting**: Categories issues by severity with detailed descriptions

##### C. Resource Monitoring
- **Process Memory Usage**: RSS, VMS, and percentage memory utilization
- **CPU Usage**: Process CPU percentage and thread count
- **System Resources**: Total/available memory, disk usage, CPU cores
- **Database Statistics**: Connection info and cache performance
- **Real-time Recommendations**: Dynamic suggestions based on resource usage

**How Resource Monitoring Works:**
1. **Process Analysis**: Uses psutil (when available) to get detailed process metrics
2. **System Overview**: Shows total system resources and availability
3. **Database Metrics**: Analyzes database cache usage and connection stats
4. **Smart Alerts**: Provides recommendations when resources are under stress

##### D. All Tables Analysis
- **Complete Table Breakdown**: Shows all 37 database tables with categorization
- **FTS5 Explanation**: Explains why SQLite creates multiple search tables
- **System vs Application**: Clearly distinguishes user data from system tables
- **Visual Statistics**: Charts showing table distribution by category

**How All Tables Analysis Works:**
1. **Complete Discovery**: Queries sqlite_master for all tables and indexes
2. **Smart Categorization**: Groups tables by function (Application/FTS5/System)
3. **Educational Display**: Explains the purpose of each table category
4. **Visual Breakdown**: Shows statistics and counts per category

#### 6. Console Commands Tab
- **Frontend Browser Commands**: JavaScript debugging and localStorage management
- **Backend CLI Commands**: Pytest, database operations, and health checks
- **Docker Commands**: Container management and debugging
- **Copy-to-Clipboard**: One-click command copying

**How Console Commands Work:**
1. **Categorized Commands**: Groups commands by usage (Frontend, Backend, Docker)
2. **Copy Functionality**: One-click copying of commands to clipboard
3. **Detailed Descriptions**: Explains what each command does
4. **Execution Guidance**: Shows where and how to run each command

### Backend Testing Endpoints
**Base URL**: `/api/v1/testing/`

#### Database Testing
```
GET /testing/database/stats
  - Returns: Database size, table counts, individual table sizes, user info
  - NEW: table_sizes field with size_bytes, size_mb, page_count per table

GET /testing/database/sample-rows?table={table}&limit={limit}
  - Returns: Sample rows from specified table with JSON formatting

GET /testing/database/table-schema?table={table}
  - Returns: Complete table schema with column details and constraints

GET /testing/database/all-tables
  - NEW: Complete list of all 37 tables with categorization and explanations
  - Returns: Tables grouped by category with detailed explanations
```

#### 🆕 Advanced Testing Endpoints

##### Performance Testing
```
GET /testing/performance/database-metrics
  - Returns: Query timing analysis, database configuration, performance scoring
  - Features: Simple/complex query timings, PRAGMA settings, recommendations
```

##### Data Integrity Testing
```
GET /testing/validation/data-integrity
  - Returns: Comprehensive data validation results
  - Checks: Foreign keys, date consistency, required fields, SQLite integrity
  - Format: Detailed pass/warning/critical breakdown
```

##### Resource Monitoring
```
GET /testing/monitoring/resource-usage
  - Returns: Process memory, CPU usage, system resources, database stats
  - Features: Real-time metrics with recommendations
  - Fallback: Graceful handling when psutil unavailable
```

#### Diary Encryption Testing
```
POST /testing/diary/encryption-test
  Body: { "password": "user_diary_password" }
  - Returns: Encryption test results and sample decrypted entry
```

#### System Health
```
GET /testing/health
  - Returns: Basic system health check

GET /testing/health/detailed
  - Returns: Comprehensive system information with user session details
```

#### Console Commands
```
GET /testing/console-commands
  - Returns: Categorized command sets for frontend, backend, and Docker testing
```

## 🛠️ Testing Commands Reference

### Frontend Browser Console Commands

#### Authentication Testing
```javascript
// Check current authentication status
const authStatus = JSON.parse(localStorage.getItem('auth_user') || '{}');
console.log('Auth Status:', authStatus);

// Validate JWT token
const token = localStorage.getItem('jwt_token');
if (token) {
  const payload = JSON.parse(atob(token.split('.')[1]));
  console.log('Token Payload:', payload);
  console.log('Expires:', new Date(payload.exp * 1000));
}

// Clear authentication data
localStorage.removeItem('jwt_token');
localStorage.removeItem('auth_user');
location.reload();
```

#### LocalStorage Management
```javascript
// View all stored data
console.log('LocalStorage:', Object.fromEntries(
  Object.entries(localStorage).map(([k,v]) => [k, JSON.parse(v)])
));

// Clear all application data
['jwt_token', 'auth_user', 'notes', 'documents'].forEach(key => 
  localStorage.removeItem(key)
);

// Export all data for backup
const backup = Object.fromEntries(Object.entries(localStorage));
console.log('Backup Data:', JSON.stringify(backup, null, 2));
```

#### API Testing
```javascript
// Test backend connectivity
fetch('http://localhost:8000/health')
  .then(r => r.json())
  .then(data => console.log('Backend Health:', data));

// Test authenticated endpoint
const token = localStorage.getItem('jwt_token');
fetch('http://localhost:8000/api/v1/notes', {
  headers: { 'Authorization': `Bearer ${token}` }
})
.then(r => r.json())
.then(data => console.log('Notes API:', data));
```

### Backend CLI Commands

#### Pytest Testing
```bash
# Run all tests with coverage
cd pkms-backend
python -m pytest tests/ -v --cov=app --cov-report=html

# Run specific test categories
python -m pytest tests/test_auth.py -v
python -m pytest tests/ -k "authentication" -v

# Run tests with detailed output
python -m pytest tests/ -v -s --tb=long

# Generate coverage report
python -m pytest --cov=app --cov-report=term-missing
```

#### Database Operations
```bash
# Database inspection
cd pkms-backend
python -c "
from app.database import engine
from sqlalchemy import text
with engine.connect() as conn:
    tables = conn.execute(text('SELECT name FROM sqlite_master WHERE type=\"table\"')).fetchall()
    print('Tables:', [t[0] for t in tables])
"

# Check database size
python -c "
import os
db_path = 'data/pkm_metadata.db'
if os.path.exists(db_path):
    size = os.path.getsize(db_path)
    print(f'Database size: {size} bytes ({size/1024/1024:.2f} MB)')
"

# Run database integrity check
python -c "
from app.database import engine
from sqlalchemy import text
with engine.connect() as conn:
    result = conn.execute(text('PRAGMA integrity_check')).fetchone()
    print('DB Integrity:', result[0])
"
```

#### Health Checks
```bash
# Backend health check
curl -X GET http://localhost:8000/health

# Authentication test
curl -X POST http://localhost:8000/api/v1/auth/login \
  -H "Content-Type: application/json" \
  -d '{"username":"test","password":"test"}'

# Database stats (requires auth)
curl -X GET http://localhost:8000/api/v1/testing/database/stats \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"
```

#### Advanced Testing Script
```bash
# Comprehensive backend test
cd pkms-backend
python scripts/test_runner.py --comprehensive

# Run with specific filters
python scripts/test_runner.py --auth-only --verbose

# Generate detailed report
python scripts/test_runner.py --generate-report
```

### Docker Debugging Commands

#### Container Management
```bash
# View container logs
docker-compose logs pkms-backend
docker-compose logs pkms-frontend

# Interactive backend shell
docker-compose exec pkms-backend bash

# Database file access
docker-compose exec pkms-backend ls -la data/
docker-compose exec pkms-backend sqlite3 data/pkm_metadata.db ".tables"

# Restart services
docker-compose restart pkms-backend
docker-compose restart pkms-frontend
```

#### Health Monitoring
```bash
# Container resource usage
docker stats pkms-backend pkms-frontend

# Network connectivity test
docker-compose exec pkms-frontend ping pkms-backend

# Port verification
docker-compose ps
netstat -tulpn | grep :8000
netstat -tulpn | grep :3000
```

## Testing Best Practices

### 1. Pre-Testing Checklist
- [ ] Verify Docker containers are running
- [ ] Check backend health endpoint
- [ ] Confirm authentication status
- [ ] Validate database connectivity

### 2. Authentication Testing
- [ ] Test token validation and expiry
- [ ] Verify protected route access
- [ ] Check race condition scenarios
- [ ] Validate session persistence

### 3. Database Testing
- [ ] Check table schemas match models
- [ ] Verify data integrity constraints
- [ ] Test sample data retrieval
- [ ] Validate encryption for diary entries

### 4. Integration Testing
- [ ] Test full authentication flow
- [ ] Verify CORS configuration
- [ ] Check API endpoint accessibility
- [ ] Test error handling scenarios

## Troubleshooting Guide

### Common Issues

#### Authentication Problems
- **403 Forbidden**: Check JWT token validity and expiry
- **Race Conditions**: Verify AuthGuard completion before API calls
- **CORS Errors**: Ensure backend CORS configuration includes frontend origin

#### Database Issues
- **Connection Errors**: Verify SQLite file permissions and path
- **Schema Mismatches**: Run migrations and check model definitions
- **Encryption Failures**: Validate diary password and encryption keys

#### Performance Issues
- **Slow API Responses**: Check database query optimization
- **Frontend Lag**: Monitor network requests and state management
- **Memory Usage**: Analyze container resource consumption

### Quick Fixes

#### Clear Application State
```bash
# Frontend storage reset
localStorage.clear();
sessionStorage.clear();
location.reload();

# Backend container restart
docker-compose restart pkms-backend
```

#### Database Repair
```bash
# SQLite integrity check and repair
cd pkms-backend
python -c "
from app.database import engine
from sqlalchemy import text
with engine.connect() as conn:
    conn.execute(text('VACUUM'))
    print('Database vacuumed successfully')
"
```

## Security Considerations

### Authentication Security
- JWT tokens stored in localStorage (consider httpOnly cookies for production)
- Password hashing with bcrypt
- Token expiry and refresh mechanisms
- Protected route implementation

### Diary Encryption
- Client-side encryption for sensitive data
- Secure password handling
- Encryption key management
- Media file security

### API Security
- Input validation and sanitization
- CORS configuration
- Rate limiting considerations
- Error message security

## Performance Optimizations

### Database Optimizations
- Proper indexing on frequently queried columns
- Connection pooling for concurrent requests
- Query optimization for complex operations
- Regular database maintenance (VACUUM)

### Frontend Optimizations
- Component lazy loading
- State management optimization
- API request caching
- Bundle size optimization

## Deployment Notes

### Development Environment
- Docker Compose for local development
- Hot reloading for both frontend and backend
- Development database with sample data
- Debug logging enabled

### Production Considerations
- Environment variable configuration
- HTTPS enforcement
- Database backup strategies
- Monitoring and logging setup
- Error tracking integration

## Testing Infrastructure

### Backend Testing (pytest)
- **Location**: `pkms-backend/tests/`
- **Configuration**: `conftest.py` with shared fixtures
- **Coverage**: Authentication, API endpoints, database operations
- **Features**: Async testing, database isolation, mocking

### Frontend Testing Interface
- **Location**: User menu → "Testing & Debug"
- **Features**: Real-time testing, detailed logging, result export
- **Capabilities**: Auth testing, database inspection, encryption verification

### CLI Testing Tools
- **Script**: `pkms-backend/scripts/test_runner.py`
- **Features**: Colored output, health checks, coverage analysis
- **Usage**: `python scripts/test_runner.py --comprehensive`

This comprehensive testing infrastructure ensures robust application development and provides detailed debugging capabilities for both development and production troubleshooting.

---

## 🆕 RECENT MAJOR UPDATES & IMPROVEMENTS

**Last Updated:** January 28, 2025  
**Updated By:** Claude Sonnet 4 (via Cursor)

### CRITICAL SYSTEM ENHANCEMENTS COMPLETED

#### 1. Frontend Service Architecture Overhaul (January 2025)
**Impact:** Complete standardization of API interactions across all frontend services

**Key Improvements:**
- ✅ **API Endpoint Consistency**: Standardized paths across documentsService, notesService, archiveService, searchService
- ✅ **ID/UUID Standardization**: Fixed backend-frontend ID type mismatches throughout system
- ✅ **Error Handling Consolidation**: Centralized error management with consistent user feedback
- ✅ **Performance Optimization**: Reduced redundant API calls, improved cache invalidation
- ✅ **Type Safety Enhancement**: Strengthened TypeScript definitions and interface contracts

**Files Modified:**
- `pkms-frontend/src/services/documentsService.ts` - Complete interface reconstruction
- `pkms-frontend/src/services/notesService.ts` - Upload optimization and cache integration
- `pkms-frontend/src/services/archiveService.ts` - Error handling standardization
- `pkms-frontend/src/services/searchService.ts` - Smart cache invalidation implementation

#### 2. Diary Module Crisis Resolution (July 15, 2025)
**Impact:** Resolved critical system freeze and infinite loop issues

**Problems Resolved:**
- ✅ **React Infinite Loops**: Fixed useEffect dependency issues causing hundreds of API calls
- ✅ **Database Schema Issues**: Resolved UUID vs ID mismatches in diary tables
- ✅ **CORS & Authentication**: Fixed calendar endpoint failures and token handling
- ✅ **Performance Recovery**: Eliminated browser unresponsiveness and resource waste

**Technical Solutions:**
- Proper React useEffect dependency management (removed function dependencies)
- Database volume reset with fresh schema generation
- Authentication flow improvements and CORS configuration
- Comprehensive logging and debugging infrastructure

#### 3. Authentication & Recovery System Enhancement (July 11, 2025)
**Impact:** Improved user experience and multi-user compatibility

**Features Added:**
- ✅ **Flexible Recovery API**: Optional username parameter for single-user installations
- ✅ **Simplified Diary Passwords**: Removed overly strict complexity requirements
- ✅ **Multi-User Safety**: Auto-detection and appropriate error handling
- ✅ **Frontend Compatibility**: Restored compatibility with existing React recovery UI

#### 4. Archive & Documents UI Modernization (July 10-11, 2025)
**Impact:** Modern document management interface with enhanced user experience

**UI/UX Improvements:**
- ✅ **Archive Module**: 2-column layout, optimistic updates, chunked upload progress
- ✅ **Document Management**: Sidebar toggles, archive status badges, one-click operations
- ✅ **Visual Feedback**: Loading states, empty folder messaging, progress indicators
- ✅ **Type Safety**: Robust filtering and error handling across all operations

### SYSTEM STABILITY & PERFORMANCE METRICS

#### Before Recent Updates:
- ❌ Hundreds of pending API calls causing browser freeze
- ❌ Inconsistent API patterns across frontend services
- ❌ UUID vs ID mismatches causing operation failures
- ❌ Complex recovery flows with poor error handling

#### After Recent Updates:
- ✅ Controlled API interactions with proper dependency management
- ✅ Consistent service architecture with centralized error handling
- ✅ Proper UUID implementation throughout system
- ✅ Streamlined authentication and recovery flows
- ✅ Modern UI with responsive design and clear user feedback

### TESTING & MONITORING ENHANCEMENTS

The testing infrastructure has been significantly enhanced with:
- **Enterprise-Level Monitoring**: 6-tab testing interface with real-time diagnostics
- **Performance Analysis**: Query timing, database configuration, and optimization recommendations
- **Data Integrity Validation**: Comprehensive foreign key checks and consistency validation
- **Resource Monitoring**: Process memory, CPU usage, and system resource analysis

### SECURITY & BEST PRACTICES COMPLIANCE

All recent updates follow industry best practices:
- ✅ **API Consistency**: RESTful patterns with proper HTTP status codes
- ✅ **Type Safety**: Strong TypeScript implementation throughout
- ✅ **Error Handling**: Graceful degradation with user-friendly messages
- ✅ **Performance**: Optimized database queries and reduced network overhead
- ✅ **Security**: Maintained authentication integrity while improving user experience

This comprehensive system update ensures PKMS is ready for production deployment with robust error handling, modern UI/UX, and enterprise-level monitoring capabilities.