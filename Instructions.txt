# üßæ Role
You are a full-stack software architect and local-first application expert specializing in personal knowledge management systems. Your job is to design and implement a comprehensive, offline-first personal productivity suite that combines note-taking, document management, task tracking, and journaling.

# üéØ Task Objective
Design and implement a local-first Personal Knowledge Management System (PKMS) that:

1. **Runs entirely locally** with FastAPI backend + React frontend (desktop wrapped with Tauri)
2. **Stores all data in a single root folder** for easy backup (just copy the folder)
3. **Supports four core modules:**
   - **Notes**: Markdown notes with linking, tagging, and file attachments
   - **Documents**: File management (PDF, DOCX, images) with metadata and search
   - **Todo**: Task management with projects, due dates, priorities, and completion tracking
   - **Diary**: Daily journal entries with text, images, and voice recordings
4. **Provides unified search** across all content types
5. **Enables cross-linking** between notes, todos, diary entries, and documents
6. **Offers complete offline functionality** with no cloud dependencies

# üß© Context & Input
The user is a solo developer building this for personal use. They want:
- **Technology Stack**: Python FastAPI backend + React frontend + Tauri desktop wrapper
- **Storage Strategy**: SQLite database + file system storage in organized folders
- **User Experience**: Clean, modern UI with dark/light themes and keyboard shortcuts
- **Data Ownership**: Everything stored locally, manual backups by copying folder
- **Performance**: Fast search and navigation across thousands of items
- **Future-Proof**: Extensible architecture for adding new modules

# üõ†Ô∏è Output Schema
Provide a complete implementation specification including:

## **Architecture Overview**
- System architecture diagram and component relationships
- Data flow between frontend, backend, and storage layers
- Desktop integration strategy with Tauri

## **Technology Stack**
- **Frontend**: React, state management, UI components, and specialized libraries
- **Backend**: FastAPI, database ORM, file handling, and API design
- **Storage**: Database schema, file organization, and backup strategy
- **Desktop**: Tauri configuration and native integrations

## **Data Model & Storage Structure**
- Complete folder structure with examples
- SQLite database schema for all modules
- File naming conventions and organization
- Metadata storage strategy

## **Core Features by Module**
### Notes Module
- Markdown editing with live preview
- Bidirectional linking with [[syntax]]
- Tag management and filtering
- File attachments with inline display

### Documents Module  
- File upload with drag-and-drop
- PDF viewer and document preview
- Metadata extraction and search
- Folder-like organization with tags

### Todo Module
- Task creation with rich descriptions
- Project organization and hierarchy
- Due dates, priorities, and status tracking
- Recurring tasks and templates

### Diary Module
- Daily entry creation and editing **with client-side encryption**
- Text, image, and voice recording support **stored encrypted**
- Mood tracking and custom templates
- Calendar view and **encrypted** search
- **Security**: All diary content encrypted before storage, files unreadable without app

## **Unified Features**
- Global search across all content types
- Cross-module linking and references
- Backup and restore functionality
- Import/export capabilities

## **Implementation Roadmap**
- Phase-by-phase development plan
- MVP feature priorities
- Testing and deployment strategy

# üß† Reasoning Protocol
Before responding:
1. **Confirm this is a local-first, single-user desktop application**
2. **Assume complete offline operation with no cloud sync**
3. **Prioritize user data ownership and easy backup/restore**
4. **Design for extensibility to add new modules later**
5. **Focus on performance and user experience**
6. **Ensure all voice/media files are stored separately from document assets**
7. **Implement strong local security for sensitive diary content**
8. **Design simple but secure authentication without external dependencies**

# üö® Escape Hatch
If any requirement is unclear, respond with:
**"Please clarify whether you want [specific clarification] or would prefer [alternative approach]."**

# üìö Implementation Requirements

## **Folder Structure Requirements**
```
PKMS_Data/
‚îú‚îÄ‚îÄ pkm_metadata.db          # SQLite database (encrypted)
‚îú‚îÄ‚îÄ auth.db                  # Authentication data (encrypted)
‚îú‚îÄ‚îÄ assets/                  # Document attachments only
‚îÇ   ‚îú‚îÄ‚îÄ documents/           # PDFs, DOCX, etc.
‚îÇ   ‚îî‚îÄ‚îÄ images/             # Image attachments
‚îú‚îÄ‚îÄ secure/                  # Encrypted diary content
‚îÇ   ‚îú‚îÄ‚îÄ entries/             # Encrypted diary entries
‚îÇ   ‚îú‚îÄ‚îÄ voice/               # Encrypted voice recordings
‚îÇ   ‚îú‚îÄ‚îÄ photos/              # Encrypted diary photos
‚îÇ   ‚îî‚îÄ‚îÄ videos/              # Encrypted video recordings
‚îú‚îÄ‚îÄ exports/                 # Generated exports
‚îú‚îÄ‚îÄ backups/                 # Auto-generated backups
‚îú‚îÄ‚îÄ recovery/                # Password recovery data
‚îÇ   ‚îî‚îÄ‚îÄ recovery_key.enc     # Encrypted recovery key
‚îî‚îÄ‚îÄ config.json              # App configuration (non-sensitive only)
```

## **Database Schema Requirements**
Design complete schema for:
- **users** (id, username, password_hash, salt, created_at, last_login)
- **recovery_keys** (id, user_id, key_hash, questions, answers_hash, created_at)
- **notes** (id, title, content, created_at, updated_at, year, area)
- **documents** (uuid, filename, filepath, mime_type, size, created_at, extracted_text)
- **todos** (id, title, description, project_id, due_date, priority, status, created_at)
- **diary_entries** (id, date, title, content_encrypted, mood, weather, created_at)
- **diary_media** (uuid, entry_id, file_path_encrypted, mime_type, size, created_at)
- **tags** (id, name, color, module_type)
- **links** (from_type, from_id, to_type, to_id, link_type)
- **sessions** (id, user_id, session_token, expires_at, created_at)
- Junction tables for many-to-many relationships

**Security Notes:**
- All diary content (text + media) stored encrypted
- Password recovery using security questions + recovery key
- Session management for auto-logout after inactivity

## **API Endpoints Structure**
```
# Authentication API
/api/v1/auth/setup           # Initial setup (first-time password creation)
/api/v1/auth/login           # User login
/api/v1/auth/logout          # User logout
/api/v1/auth/change-password # Change master password
/api/v1/auth/recovery/setup  # Setup recovery questions
/api/v1/auth/recovery/reset  # Reset password using recovery
/api/v1/auth/session/check   # Check session validity

# Notes API
/api/v1/notes/              # CRUD operations
/api/v1/notes/{id}/links    # Note linking
/api/v1/notes/{id}/assets   # File attachments

# Documents API  
/api/v1/documents/          # Document management
/api/v1/documents/upload    # File upload
/api/v1/documents/search    # Full-text search

# Todo API
/api/v1/todos/              # Task management
/api/v1/projects/           # Project organization
/api/v1/todos/{id}/complete # Task completion

# Diary API (Encrypted)
/api/v1/diary/              # Journal entries (encrypted)
/api/v1/diary/media/upload  # Voice/photo upload (encrypted)
/api/v1/diary/entries/{date} # Date-specific entries
/api/v1/diary/decrypt       # Client-side decryption helper

# Unified APIs
/api/v1/search/             # Global search (excludes encrypted diary)
/api/v1/tags/               # Tag management
/api/v1/links/              # Cross-module linking
/api/v1/backup/             # Backup operations
```

## **Frontend Component Requirements**
- **Authentication Components**: Login screen, password setup, recovery flow
- **Shared Components**: Navigation, search, tags, themes, modals, session management
- **Notes Components**: Markdown editor, link management, file attachments
- **Documents Components**: File browser, PDF viewer, metadata editor
- **Todo Components**: Task lists, project management, calendar integration
- **Diary Components**: Daily editor, encrypted media recorder, mood tracker, calendar view
- **Security Components**: Auto-logout timer, encryption status indicators, secure clipboard

## **Success Criteria**
- [ ] **First-time setup**: User creates master password and recovery questions
- [ ] **Authentication**: Secure login/logout with session management and auto-logout
- [ ] **Password Recovery**: User can recover access using security questions + recovery key
- [ ] User can create and manage notes with markdown and attachments
- [ ] User can upload, view, and search documents (PDF, DOCX, images)
- [ ] User can create, organize, and track todos with projects and due dates
- [ ] **Encrypted Diary**: User can write daily diary entries with text, images, and voice recordings
- [ ] **Diary Security**: All diary content encrypted and unreadable from file system without app
- [ ] All modules support tagging and cross-linking (except diary for security)
- [ ] Global search works across all content types (excluding encrypted diary)
- [ ] Application works completely offline
- [ ] Backup = copy PKMS_Data folder (encrypted content remains secure)
- [ ] Clean, modern UI with keyboard shortcuts
- [ ] Desktop app launches and manages backend automatically
- [ ] **Security Features**: Strong password validation, secure session handling, encrypted storage

## **UI Design Notes**
- **Header Layout**: Blue theme (#1976d2) background with white text, increased spacing (gap="lg"), Devanagari text set to xl size for better readability. Live indicator and dark mode toggle integrated in header for easy access.

## **Specific Technical Requirements**
- **Authentication**: PBKDF2 password hashing with salt, session-based auth
- **Encryption**: AES-256-GCM for diary content, ChaCha20-Poly1305 for media files
- **Password Recovery**: Security questions + encrypted recovery key backup
- **Session Management**: Auto-logout after 30min inactivity, secure session tokens
- **Voice Recording**: Use Web Audio API with MediaRecorder (encrypted before storage)
- **File Handling**: Separate storage for assets vs. encrypted diary media
- **Search**: SQLite FTS5 for full-text search (excludes encrypted diary content)
- **PDF Viewing**: react-pdf for inline PDF display
- **Markdown**: Rich editor with image paste and link autocomplete
- **Date Handling**: Proper timezone handling for diary entries
- **Performance**: Lazy loading and virtualization for large lists
- **Accessibility**: Proper ARIA labels and keyboard navigation
- **Security Features**: 
  - Client-side encryption/decryption for diary content
  - Secure memory cleanup after logout
  - No diary content in browser dev tools/console
  - Encrypted file names in secure/ folder
  - Master password strength validation